(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{454:function(t,a,s){t.exports=s.p+"assets/img/url-1.164b93bb.jpg"},455:function(t,a,s){t.exports=s.p+"assets/img/dns.fc3be6a4.jpg"},456:function(t,a,s){t.exports=s.p+"assets/img/url-2.a30652c3.jpg"},531:function(t,a,s){"use strict";s.r(a);var _=s(2),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器"}},[t._v("#")]),t._v(" 1 浏览器")]),t._v(" "),a("h2",{attrs:{id:"_1-1-浏览器进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-浏览器进程"}},[t._v("#")]),t._v(" 1.1 浏览器进程")]),t._v(" "),a("p",[t._v("ui线程 控制浏览器上的按钮输入框等\n网络线程 负责资源的下载\n储存线程 负责本地缓存的访问")]),t._v(" "),a("h2",{attrs:{id:"_1-2-渲染进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-渲染进程"}},[t._v("#")]),t._v(" 1.2 渲染进程")]),t._v(" "),a("p",[t._v("js引擎          负责执行js，所以js是单线程\ngui渲染线程     负责渲染资源，和js引擎互斥\n事件触发线程     所有的事件都会被推入事件栈\n异步请求线程     处理请求和异步函数，通过回调来通知时间的触发进程\n定时器线程       处理定时器，这也就是说为什么有微宏任务，能分的这么详细的原因")]),t._v(" "),a("h2",{attrs:{id:"_1-3-cpu进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-cpu进程"}},[t._v("#")]),t._v(" 1.3 cpu进程")]),t._v(" "),a("p",[t._v("第三方插件进程，安装的浏览器插件")]),t._v(" "),a("h1",{attrs:{id:"_2-构建请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-构建请求"}},[t._v("#")]),t._v(" 2 构建请求")]),t._v(" "),a("p",[t._v("接到url变化，然后看转发给网络线程，构建请求，在然后开始请求")]),t._v(" "),a("h1",{attrs:{id:"_3-查找强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-查找强缓存"}},[t._v("#")]),t._v(" 3 查找强缓存")]),t._v(" "),a("h2",{attrs:{id:"_3-1-强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-强缓存"}},[t._v("#")]),t._v(" 3.1 强缓存")]),t._v(" "),a("p",[t._v("1:exprires绝对失效时间，标准时间格式，这个是本地时间做对比，用户可手动修改本地时间\n2:cacge-control：缓存多少秒过期，相对时间")]),t._v(" "),a("img",{attrs:{src:s(454)}}),t._v(" "),a("h2",{attrs:{id:"_3-2-强缓存的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-强缓存的优先级"}},[t._v("#")]),t._v(" 3.2 强缓存的优先级")]),t._v(" "),a("p",[t._v("如果"),a("strong",[t._v("exprires和cacge-control同时存在 那么优先读取cacge-control的缓存")])]),t._v(" "),a("h1",{attrs:{id:"_4-dns解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-dns解析"}},[t._v("#")]),t._v(" 4 DNS解析")]),t._v(" "),a("p",[t._v("DNS解析出当前域名的真实ip")]),t._v(" "),a("h2",{attrs:{id:"_4-1-解析8步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-解析8步"}},[t._v("#")]),t._v(" 4.1 解析8步")]),t._v(" "),a("p",[t._v("1：输入网址（域名），告诉要找到他的ip\n2：先去本地查找混存，询问域名对应的id，如果有没有的话，就去第三步\n3：去dns跟服务找到这个域名，在返回本地的dns服务器询问ip\n4：本地dns在去转发到.com的根域名服务去查找ip\n5：根域名在给你返回一个你要访问的地址\n6：你带着命令去找访问地址问他这个域名的ip\n7：你访问的那个服务器给你ip\n8：本地dns服务器得到域名的ip 然后写入缓存，下次就只在本地dns去查找")]),t._v(" "),a("img",{attrs:{src:s(455)}}),t._v(" "),a("h1",{attrs:{id:"_5-建立tcp连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-建立tcp连接"}},[t._v("#")]),t._v(" 5 建立tcp连接")]),t._v(" "),a("p",[t._v("知道服务器的 IP 地址后，就可以跟服务器正式建立连接了，所以需要跟服务器建立 TCP 连接。通过三次握手。三次握手的流程如下图所示。")]),t._v(" "),a("img",{attrs:{src:s(456)}}),t._v(" "),a("h2",{attrs:{id:"_5-1-为啥要三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-为啥要三次握手"}},[t._v("#")]),t._v(" 5.1 为啥要三次握手")]),t._v(" "),a("p",[t._v("是因为浏览器和服务器都需要确认对方有正常的收发能力。如果两次握手的话，客户端能知道服务端能收能发，但服务端只能知道客户端能发送数据，并不知道客户端接受数据是没问题的----个人理解\n第一次 前端：我要向后端一决生死 ；\n第二次：后端：来啊，我就在这，你来啊；\n第三次：前端：你tm等着看我不捅死你；-----握手完毕")]),t._v(" "),a("h1",{attrs:{id:"_6-发送请求-收到相应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-发送请求-收到相应"}},[t._v("#")]),t._v(" 6 发送请求，收到相应")]),t._v(" "),a("p",[t._v("前端：发送的请求头，请求体，url，http协议发过去\n后端：http协议，状态码，响应头，响应体。")]),t._v(" "),a("h1",{attrs:{id:"_7-找协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-找协商缓存"}},[t._v("#")]),t._v(" 7 找协商缓存")]),t._v(" "),a("p",[t._v("前端得到响应码304，就会去找本地的缓存\ndisk cacne 存咋磁盘中，下次进来的时候直接缓存中去取效率慢，到那时内存大，时间长\nmemory cache 存在浏览器的内存中，效率快，时间没有disk cache时间长")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("协商缓存  Etag 收到的是标识符，修改了一点，但是没必要完全下载资源变化时间小于1秒\n         Last-Modified收到的是最后修改时间   e-tag的优先级大于last-Modified\n")])])]),a("h1",{attrs:{id:"_8-断开tcp链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-断开tcp链接"}},[t._v("#")]),t._v(" 8 断开tcp链接")]),t._v(" "),a("p",[t._v("1：第一次客户端说要关闭了，\n2：服务端好嘞，我也关，\n3：服务端，你等等我把剩下的发完\n4：客户端，ok我去渲染完，我也关了\n为什么要有四次挥手，握手就三次呢 如果没有第三步，是不是就拿不到服务端还没发送完的数据导致数据丢失")]),t._v(" "),a("h2",{attrs:{id:"_9-解析html-构建dom树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-解析html-构建dom树"}},[t._v("#")]),t._v(" 9 解析HTML 构建dom树")]),t._v(" "),a("h2",{attrs:{id:"_10-样式计算构建cssdom树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-样式计算构建cssdom树"}},[t._v("#")]),t._v(" 10 样式计算构建cssdom树")]),t._v(" "),a("h2",{attrs:{id:"_11-布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-布局"}},[t._v("#")]),t._v(" 11 布局")]),t._v(" "),a("h2",{attrs:{id:"_12-生成图层树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-生成图层树"}},[t._v("#")]),t._v(" 12 生成图层树")]),t._v(" "),a("h2",{attrs:{id:"_13-绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-绘制"}},[t._v("#")]),t._v(" 13 绘制")]),t._v(" "),a("h2",{attrs:{id:"_14-合成于显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-合成于显示"}},[t._v("#")]),t._v(" 14 合成于显示")]),t._v(" "),a("h1",{attrs:{id:"渲染流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[t._v("#")]),t._v(" 渲染流程")]),t._v(" "),a("p",[t._v("1：渲染进程将HTML内容转化为能够读懂的DOM书结构")]),t._v(" "),a("p",[t._v("2：渲染引擎将Css样式转化为浏览器可以理解的styleSheets，计算成cssdom树")]),t._v(" "),a("p",[t._v("3：创建布局树，并计算元素布局信息")]),t._v(" "),a("p",[t._v("4：对每个布局书进行分层，并生成图层树")]),t._v(" "),a("p",[t._v("5：为每个图层生成绘制列表，并将其提交到合成线程")]),t._v(" "),a("p",[t._v("6：合成线程将土城分成图款，并在栅格化线程池中将图块转化成位图")]),t._v(" "),a("p",[t._v("7：合成线程搞定的时候发送命令给DrawQuad给浏览器进程")]),t._v(" "),a("p",[t._v("8：浏览器根根据合成线程发过来的信息生成页面，并且显示到显示器上")])])}),[],!1,null,null,null);a.default=r.exports}}]);