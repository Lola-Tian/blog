(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{439:function(s,n,e){s.exports=e.p+"assets/img/rem1.55578db8.jpg"},440:function(s,n,e){s.exports=e.p+"assets/img/rem2.3e36b4ae.jpg"},441:function(s,n,e){s.exports=e.p+"assets/img/rem3.03f1b891.jpg"},522:function(s,n,e){"use strict";e.r(n);var a=e(2),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"快速入门-postcss-插件-自动转换-px-到-rem"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-postcss-插件-自动转换-px-到-rem"}},[s._v("#")]),s._v(" 快速入门 postcss 插件：自动转换 px 到 rem")]),s._v(" "),n("p",[s._v("postcss 是 css 的 transpiler（转换编译器，简称转译器），它对于 css 就像 babel 对于 js 一样，能够做 css 代码的分析和转换。同时，它也提供了插件机制来做自定义的转换。")]),s._v(" "),n("h3",{attrs:{id:"postcss-的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postcss-的原理"}},[s._v("#")]),s._v(" postcss 的原理")]),s._v(" "),n("p",[s._v("postcss 是 css 到 css 的转译器，它也和 babel 一样，分为 parse、transform、generate 3个阶段。各种转换插件都是工作在 transform 阶段，基于 AST 做分析和转换。\n"),n("img",{attrs:{src:e(439)}}),n("br"),s._v("\ncss 的 AST 比 js 的简单多了，主要有这么几种："),n("br"),s._v("\natrule：以 @ 开头的规则，比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@media screen and (min-width: 480px) {\n    body {\n        background-color: lightgreen;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("rule：选择器开头的规则，比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ul li {\n\tpadding: 5px;\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("decl：具体的样式，比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("padding: 5px;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("比起 js parser 的那几十种 AST 是不是简单的多？"),n("br")]),s._v(" "),n("p",[s._v("这些可以通过  "),n("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("astexplorer.net"),n("OutboundLink")],1),s._v(" 来可视化的查看")]),s._v(" "),n("p",[n("img",{attrs:{src:e(440)}}),n("br")]),s._v(" "),n("h3",{attrs:{id:"postcss-插件的写法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postcss-插件的写法"}},[s._v("#")]),s._v(" postcss 插件的写法")]),s._v(" "),n("p",[s._v("postcss 插件是工作在 transform 阶段，处理 ast 节点，插件的形式是这样的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const plugin = (options = {}) => {\n  return {\n    postcssPlugin: '插件名字',\n\n    Rule (node) {},\n    Declaration (node) {},\n    AtRule (node) {}\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("外层函数接受 options，返回一个插件的对象，声明对什么节点做处理的 listener，然后在对应的 listener 里写处理逻辑就行。"),n("br")]),s._v(" "),n("p",[s._v("还可以这样写：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = (opts = {}) => {\n  return {\n    postcssPlugin: '插件名字',\n    prepare (result) {\n      // 这里可以放一些公共的逻辑\n      return {\n        Declaration (node) {},\n        Rule (node) {},\n        AtRule (node) {}\n      }\n    }\n  }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("在 prepare 里返回各种 listener，这样比起第一种来，好处是可以存放一些公共的逻辑。"),n("br")]),s._v(" "),n("p",[s._v("然后可以这样来运行插件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const postcss = require('postcss');\n\npostcss([plugin({\n    // options\n})]).process('a { font-size: 20px; }').then(result => {\n    console.log(result.css);\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"实战案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战案例"}},[s._v("#")]),s._v(" 实战案例")]),s._v(" "),n("h3",{attrs:{id:"需求描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#需求描述"}},[s._v("#")]),s._v(" 需求描述")]),s._v(" "),n("p",[s._v("px 是一个固定的长度单位，而设备视口的尺寸是各种各样的，我们想通过一套样式来适配各种设备的显示，就需要相对的单位，常用的是 rem。"),n("br")]),s._v(" "),n("p",[s._v("rem 的本质就是等比缩放，相对于 html 元素的 font-size。"),n("br")]),s._v(" "),n("p",[s._v("比如 html 的 font-size 设置为 100px，那 1rem 就等于 100px，之后的样式如果是 200px 就写为 2rem。"),n("br")]),s._v(" "),n("p",[s._v("这样我们只需要修改 html 的 font-size 就可以适配各种屏幕宽度的显示，具体的单位会做等比缩放。"),n("br")]),s._v(" "),n("p",[s._v("我们要根据 html 的 font-size 值来把所有的 px 转换为 rem，一般都是手动来做这件事情的，但比较繁琐，知道了计算方式之后，完全可以用 postcss 插件来自动做。"),n("br")]),s._v(" "),n("p",[s._v("接下来我们就实现下这个 postcss 插件")]),s._v(" "),n("h3",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("p",[s._v("我们搭一下插件的基本结构，只需要声明对 Declaration 处理的 listener：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const plugin = (options) => {\n    return {\n        postcssPlugin: 'postcss-simple-px2rem',\n        Declaration (decl) {\n           \n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("然后要做的就是把 decl 的样式值中的 px 转换为 rem，简单的正则替换就行：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const plugin = (options) => {\n    const pxReg = /(\\d+)px/ig;\n    return {\n        postcssPlugin: 'postcss-simple-px2rem',\n        Declaration (decl) {\n            decl.value = decl.value.replace(pxReg, (matchStr, num) => {\n                return num/options.base + 'rem';\n            });\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("通过字符串的 replace 方法来做替换，第一个参数是匹配的字符串，后面的参数是分组，第一个分组就是 px 的值。"),n("br")]),s._v(" "),n("p",[s._v("计算 px 对应的 rem 需要 1rem 对应的 px 值，可以支持通过 options 来传入。")]),s._v(" "),n("p",[s._v("然后我们测试下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("postcss([plugin({\n    base: 100\n})]).process('a { font-size: 20px; }').then(result => {\n    console.log(result.css);\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("可以看到，已经正确的做了转换")]),s._v(" "),n("p",[n("img",{attrs:{src:e(441)}}),n("br")]),s._v(" "),n("p",[s._v("当然，我们这个插件只是案例，还不够完善，要做的完善的话需要更复杂的正则")]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("postcss 是 css 的 transpiler，就像 babel 是 js 的 transpiler 一样，而且 postcss 的 AST 只有几种节点，比较简单，也可以通过 "),n("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("astexplorer.net"),n("OutboundLink")],1),s._v("  来可视化的查看。"),n("br")]),s._v(" "),n("p",[s._v("postcss 也提供了插件功能，可以做一些自定义的分析和转换。"),n("br")]),s._v(" "),n("p",[s._v("我们实现了简单的 px 自动转 rem 的插件："),n("br")]),s._v(" "),n("p",[s._v("rem 是通过等比缩放的方式来达到一套样式适配不同设备宽度的显示的方案，需要做 px 到 rem 的转换，这件事可以用 postcss 插件来自动来做。")]),s._v(" "),n("p",[s._v("其实 postcss 插件的分析和转换功能还有很多的应用，比如切换主题色，从白到黑，完全就可以用 postcss 自动分析颜色的值，然后做转换。")]),s._v(" "),n("p",[s._v("postcss 分析和转换 css 的能力还是很强大很有用的，有很多在业务中的应用场景去发掘。")])])}),[],!1,null,null,null);n.default=t.exports}}]);